AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Plantilla para desplegar la parte de red de una pila LAMP en EC2. 
Parameters:
  ExerciseName:
    Description: Name of the exercise
    Type: String
    Default: Sesiones56
  KeyName:
    Description: Name of the key pair to use for SSH access
    Type: String
    Default: vockey
  DBName:
    Type: String
    Default: MyDatabase
    Description: MySQL database name
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBUser:
    Type: String
    NoEcho: true
    Description: MySQL database user
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBPassword:
    Type: String
    NoEcho: true
    Description: MySQL database user password
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
  DBRootUser:
    Type: String
    NoEcho: true
    Default: admin
    Description: Admin user for RDS
    MinLength: 1
    MaxLength: 16
  DBRootPassword:
    Type: String
    NoEcho: true
    Description: Admin password for RDS
    MinLength: 1
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
    Description: EC2 instance type
  SSHLocation:
    Description: IP range for SSH access
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3}\.){3}\d{1,3}/\d{1,2}'
Mappings:
  AWSInstanceType2Arch:
    t3.nano:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-02457590d33d576c3
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-0418306302097dbff
      HVMG2: ami-0a7fc72dc0e51aa77

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref ExerciseName, VPC, !Ref AWS::StackName]]

  FirstPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, FirstPublicSubnet, !Ref AWS::StackName],
            ]

  FirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, FirstPrivateSubnet, !Ref AWS::StackName],
            ]

  SecondPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, SecondPublicSubnet, !Ref AWS::StackName],
            ]

  SecondPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, SecondPrivateSubnet, !Ref AWS::StackName],
            ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref ExerciseName, IGW, !Ref AWS::StackName]]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, PublicRouteTable, !Ref AWS::StackName],
            ]

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  FirstPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRoute
      - VPCGatewayAttachment
    Properties:
      SubnetId: !Ref FirstPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecondPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRoute
      - VPCGatewayAttachment
    Properties:
      SubnetId: !Ref SecondPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref FirstPublicSubnet
      Tags:
        - Key: Name
          Value:
            !Join ["-", [!Ref ExerciseName, NatGateway, !Ref AWS::StackName]]

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, PrivateRouteTable, !Ref AWS::StackName],
            ]

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  FirstPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FirstPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  SecondPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecondPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # SECURITY GROUPS
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join [" ", [!Ref ExerciseName, WebServerSecGrp]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, WebServerSecGrp, !Ref AWS::StackName],
            ]

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join [" ", [!Ref ExerciseName, DatabaseSecGrp]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, DatabaseSecGrp, !Ref AWS::StackName],
            ]

  # DATABASE
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref FirstPrivateSubnet
        - !Ref SecondPrivateSubnet
      DBSubnetGroupName: !Join ["-", [!Ref ExerciseName, DBSubnetGroup]]

  DatabaseServer:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: lampdb
      DBInstanceClass: db.t3.micro
      Engine: MariaDB
      EngineVersion: "10.11.13"
      AllocatedStorage: 20
      DBName: !Ref DBName
      MasterUsername: !Ref DBRootUser
      MasterUserPassword: !Ref DBRootPassword
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      StorageEncrypted: false
      MonitoringInterval: 0
      DeletionProtection: false
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, DatabaseServer, !Ref AWS::StackName],
            ]

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - "LabRole"

  WebServerInstance:
    Type: AWS::EC2::Instance
    DependsOn: DatabaseServer
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - Install
            - Configure
        Install:
          files:
            /var/www/html/index.php:
              content: !Sub |
                <html>
                <head><title>PHP + RDS Sample</title></head>
                <body>
                <h1>LAMP con RDS</h1>
                <?php
                print "The Current Date and Time is: <br/>";
                print date("g:i A l, F j Y.");
                $curl_handle=curl_init();
                curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                // Get the hostname of the intance from the instance metadata
                curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                $hostname = curl_exec($curl_handle);
                if (empty($hostname))
                {
                  print "Sorry, for some reason, we got no hostname back <br />";
                }
                else
                {
                  print "Server = " . $hostname . "<br />";
                }
                // Get the instance-id of the intance from the instance metadata
                curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                $instanceid = curl_exec($curl_handle);
                if (empty($instanceid))
                {
                  print "Sorry, for some reason, we got no instance id back <br />";
                }
                else
                {
                  print "EC2 instance-id = " . $instanceid . "<br />";
                }
                $Database   = "${DBName}";
                $DBUser     = "${DBUser}";
                $DBPassword = "${DBPassword}";
                $DBHost     = "${DatabaseServer.Endpoint.Address}";
                $dbconnection = mysqli_connect($DBHost, $DBUser, $DBPassword, $Database)
                    or die("Connection failed: " . mysqli_connect_error());
                echo "Connected successfully to ${DBName} on ${DatabaseServer.Endpoint.Address}";
                mysqli_close($dbconnection);
                ?>
                </body>
                </html>
              mode: '000644'
              owner: root
              group: root
            /tmp/create-user.sql:
              content: !Sub |
                CREATE USER IF NOT EXISTS '${DBUser}'@'%' IDENTIFIED BY '${DBPassword}';
                GRANT ALL PRIVILEGES ON ${DBName}.* TO '${DBUser}'@'%';
                FLUSH PRIVILEGES;
              mode: '000444'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |-
                [cfn-auto-reloader-hook]
                triggers=post.update,post.add
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /var/www/html/jcasillas.php:
              content: !Sub | 
                <html>
                  <body>
                    <h1>Hey, Quino was here...</h1>
                  </body>
                </html>
              mode: '000644'
              owner: root
              group: root
          services:
            systemd:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              # Habilitación del servicio cfh-hup, que escucha cambios en el Metadata
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            01_create_user:
              command: !Sub |
                mysql -h ${DatabaseServer.Endpoint.Address} -u ${DBRootUser} -p'${DBRootPassword}' < /tmp/create-user.sql
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref FirstPublicSubnet
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref MyInstanceProfile
      MetadataOptions:
        HttpTokens: optional
        HttpPutResponseHopLimit: 1  # (opcional, valor por defecto: 1)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          dnf update -y
          dnf install -y php php-mysqli httpd mariadb105
          dnf install -y php-curl
          dnf install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          chown -R apache:apache /var/www/html
      Tags:
        - Key: Name
          Value:
            !Join [
              "-",
              [!Ref ExerciseName, WebServerRDS, !Ref AWS::StackName],
            ]

Outputs:
  DataBaseEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt DatabaseServer.Endpoint.Address
  WebsiteURL:
    Description: URL of the EC2 Web Server
    Value: !Sub 'http://${WebServerInstance.PublicDnsName}'